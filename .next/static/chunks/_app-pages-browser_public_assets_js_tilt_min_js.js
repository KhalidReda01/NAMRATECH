/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_public_assets_js_tilt_min_js"],{

/***/ "(app-pages-browser)/./public/assets/js/tilt.min.js":
/*!**************************************!*\
  !*** ./public/assets/js/tilt.min.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var VanillaTilt = function() {\n    \"use strict\";\n    class t {\n        static isSettingTrue(t) {\n            return \"\" === t || !0 === t || 1 === t;\n        }\n        getElementListener() {\n            if (this.fullPageListening) return window.document;\n            if (\"string\" == typeof this.settings[\"mouse-event-element\"]) {\n                const t = document.querySelector(this.settings[\"mouse-event-element\"]);\n                if (t) return t;\n            }\n            return this.settings[\"mouse-event-element\"] instanceof Node ? this.settings[\"mouse-event-element\"] : this.element;\n        }\n        addEventListeners() {\n            this.onMouseEnterBind = this.onMouseEnter.bind(this), this.onMouseMoveBind = this.onMouseMove.bind(this), this.onMouseLeaveBind = this.onMouseLeave.bind(this), this.onWindowResizeBind = this.onWindowResize.bind(this), this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this), this.elementListener.addEventListener(\"mouseenter\", this.onMouseEnterBind), this.elementListener.addEventListener(\"mouseleave\", this.onMouseLeaveBind), this.elementListener.addEventListener(\"mousemove\", this.onMouseMoveBind), (this.glare || this.fullPageListening) && window.addEventListener(\"resize\", this.onWindowResizeBind), this.gyroscope && window.addEventListener(\"deviceorientation\", this.onDeviceOrientationBind);\n        }\n        removeEventListeners() {\n            this.elementListener.removeEventListener(\"mouseenter\", this.onMouseEnterBind), this.elementListener.removeEventListener(\"mouseleave\", this.onMouseLeaveBind), this.elementListener.removeEventListener(\"mousemove\", this.onMouseMoveBind), this.gyroscope && window.removeEventListener(\"deviceorientation\", this.onDeviceOrientationBind), (this.glare || this.fullPageListening) && window.removeEventListener(\"resize\", this.onWindowResizeBind);\n        }\n        destroy() {\n            clearTimeout(this.transitionTimeout), null !== this.updateCall && cancelAnimationFrame(this.updateCall), this.reset(), this.removeEventListeners(), this.element.vanillaTilt = null, delete this.element.vanillaTilt, this.element = null;\n        }\n        onDeviceOrientation(t) {\n            if (null === t.gamma || null === t.beta) return;\n            this.updateElementPosition(), this.gyroscopeSamples > 0 && (this.lastgammazero = this.gammazero, this.lastbetazero = this.betazero, null === this.gammazero ? (this.gammazero = t.gamma, this.betazero = t.beta) : (this.gammazero = (t.gamma + this.lastgammazero) / 2, this.betazero = (t.beta + this.lastbetazero) / 2), this.gyroscopeSamples -= 1);\n            const e = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX, i = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY, s = e / this.width, n = i / this.height, l = (t.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero)) / s, a = (t.beta - (this.settings.gyroscopeMinAngleY + this.betazero)) / n;\n            null !== this.updateCall && cancelAnimationFrame(this.updateCall), this.event = {\n                clientX: l + this.left,\n                clientY: a + this.top\n            }, this.updateCall = requestAnimationFrame(this.updateBind);\n        }\n        onMouseEnter() {\n            this.updateElementPosition(), this.element.style.willChange = \"transform\", this.setTransition();\n        }\n        onMouseMove(t) {\n            null !== this.updateCall && cancelAnimationFrame(this.updateCall), this.event = t, this.updateCall = requestAnimationFrame(this.updateBind);\n        }\n        onMouseLeave() {\n            this.setTransition(), this.settings.reset && requestAnimationFrame(this.resetBind);\n        }\n        reset() {\n            this.event = {\n                clientX: this.left + this.width / 2,\n                clientY: this.top + this.height / 2\n            }, this.element && this.element.style && (this.element.style.transform = \"perspective(\".concat(this.settings.perspective, \"px) \") + \"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)\"), this.resetGlare();\n        }\n        resetGlare() {\n            this.glare && (this.glareElement.style.transform = \"rotate(180deg) translate(-50%, -50%)\", this.glareElement.style.opacity = \"0\");\n        }\n        updateInitialPosition() {\n            if (0 === this.settings.startX && 0 === this.settings.startY) return;\n            this.onMouseEnter(), this.fullPageListening ? this.event = {\n                clientX: (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.clientWidth,\n                clientY: (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.clientHeight\n            } : this.event = {\n                clientX: this.left + (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.width,\n                clientY: this.top + (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.height\n            };\n            let t = this.settings.scale;\n            this.settings.scale = 1, this.update(), this.settings.scale = t, this.resetGlare();\n        }\n        getValues() {\n            let t, e;\n            return this.fullPageListening ? (t = this.event.clientX / this.clientWidth, e = this.event.clientY / this.clientHeight) : (t = (this.event.clientX - this.left) / this.width, e = (this.event.clientY - this.top) / this.height), t = Math.min(Math.max(t, 0), 1), e = Math.min(Math.max(e, 0), 1), {\n                tiltX: (this.reverse * (this.settings.max - t * this.settings.max * 2)).toFixed(2),\n                tiltY: (this.reverse * (e * this.settings.max * 2 - this.settings.max)).toFixed(2),\n                percentageX: 100 * t,\n                percentageY: 100 * e,\n                angle: Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI)\n            };\n        }\n        updateElementPosition() {\n            let t = this.element.getBoundingClientRect();\n            this.width = this.element.offsetWidth, this.height = this.element.offsetHeight, this.left = t.left, this.top = t.top;\n        }\n        update() {\n            let t = this.getValues();\n            this.element.style.transform = \"perspective(\" + this.settings.perspective + \"px) rotateX(\" + (\"x\" === this.settings.axis ? 0 : t.tiltY) + \"deg) rotateY(\" + (\"y\" === this.settings.axis ? 0 : t.tiltX) + \"deg) scale3d(\" + this.settings.scale + \", \" + this.settings.scale + \", \" + this.settings.scale + \")\", this.glare && (this.glareElement.style.transform = \"rotate(\".concat(t.angle, \"deg) translate(-50%, -50%)\"), this.glareElement.style.opacity = \"\".concat(t.percentageY * this.settings[\"max-glare\"] / 100)), this.element.dispatchEvent(new CustomEvent(\"tiltChange\", {\n                detail: t\n            })), this.updateCall = null;\n        }\n        prepareGlare() {\n            if (!this.glarePrerender) {\n                const t = document.createElement(\"div\");\n                t.classList.add(\"js-tilt-glare\");\n                const e = document.createElement(\"div\");\n                e.classList.add(\"js-tilt-glare-inner\"), t.appendChild(e), this.element.appendChild(t);\n            }\n            this.glareElementWrapper = this.element.querySelector(\".js-tilt-glare\"), this.glareElement = this.element.querySelector(\".js-tilt-glare-inner\"), this.glarePrerender || (Object.assign(this.glareElementWrapper.style, {\n                position: \"absolute\",\n                top: \"0\",\n                left: \"0\",\n                width: \"100%\",\n                height: \"100%\",\n                overflow: \"hidden\",\n                \"pointer-events\": \"none\",\n                \"border-radius\": \"inherit\"\n            }), Object.assign(this.glareElement.style, {\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                \"pointer-events\": \"none\",\n                \"background-image\": \"linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)\",\n                transform: \"rotate(180deg) translate(-50%, -50%)\",\n                \"transform-origin\": \"0% 0%\",\n                opacity: \"0\"\n            }), this.updateGlareSize());\n        }\n        updateGlareSize() {\n            if (this.glare) {\n                const t = 2 * (this.element.offsetWidth > this.element.offsetHeight ? this.element.offsetWidth : this.element.offsetHeight);\n                Object.assign(this.glareElement.style, {\n                    width: \"\".concat(t, \"px\"),\n                    height: \"\".concat(t, \"px\")\n                });\n            }\n        }\n        updateClientSize() {\n            this.clientWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, this.clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        }\n        onWindowResize() {\n            this.updateGlareSize(), this.updateClientSize();\n        }\n        setTransition() {\n            clearTimeout(this.transitionTimeout), this.element.style.transition = this.settings.speed + \"ms \" + this.settings.easing, this.glare && (this.glareElement.style.transition = \"opacity \".concat(this.settings.speed, \"ms \").concat(this.settings.easing)), this.transitionTimeout = setTimeout(()=>{\n                this.element.style.transition = \"\", this.glare && (this.glareElement.style.transition = \"\");\n            }, this.settings.speed);\n        }\n        extendSettings(t) {\n            let e = {\n                reverse: !1,\n                max: 15,\n                startX: 0,\n                startY: 0,\n                perspective: 1e3,\n                easing: \"cubic-bezier(.03,.98,.52,.99)\",\n                scale: 1,\n                speed: 300,\n                transition: !0,\n                axis: null,\n                glare: !1,\n                \"max-glare\": 1,\n                \"glare-prerender\": !1,\n                \"full-page-listening\": !1,\n                \"mouse-event-element\": null,\n                reset: !0,\n                gyroscope: !0,\n                gyroscopeMinAngleX: -45,\n                gyroscopeMaxAngleX: 45,\n                gyroscopeMinAngleY: -45,\n                gyroscopeMaxAngleY: 45,\n                gyroscopeSamples: 10\n            }, i = {};\n            for(var s in e)if (s in t) i[s] = t[s];\n            else if (this.element.hasAttribute(\"data-tilt-\" + s)) {\n                let t = this.element.getAttribute(\"data-tilt-\" + s);\n                try {\n                    i[s] = JSON.parse(t);\n                } catch (e) {\n                    i[s] = t;\n                }\n            } else i[s] = e[s];\n            return i;\n        }\n        static init(e, i) {\n            e instanceof Node && (e = [\n                e\n            ]), e instanceof NodeList && (e = [].slice.call(e)), e instanceof Array && e.forEach((e)=>{\n                \"vanillaTilt\" in e || (e.vanillaTilt = new t(e, i));\n            });\n        }\n        constructor(e, i = {}){\n            if (!(e instanceof Node)) throw \"Can't initialize VanillaTilt because \" + e + \" is not a Node.\";\n            this.width = null, this.height = null, this.clientWidth = null, this.clientHeight = null, this.left = null, this.top = null, this.gammazero = null, this.betazero = null, this.lastgammazero = null, this.lastbetazero = null, this.transitionTimeout = null, this.updateCall = null, this.event = null, this.updateBind = this.update.bind(this), this.resetBind = this.reset.bind(this), this.element = e, this.settings = this.extendSettings(i), this.reverse = this.settings.reverse ? -1 : 1, this.glare = t.isSettingTrue(this.settings.glare), this.glarePrerender = t.isSettingTrue(this.settings[\"glare-prerender\"]), this.fullPageListening = t.isSettingTrue(this.settings[\"full-page-listening\"]), this.gyroscope = t.isSettingTrue(this.settings.gyroscope), this.gyroscopeSamples = this.settings.gyroscopeSamples, this.elementListener = this.getElementListener(), this.glare && this.prepareGlare(), this.fullPageListening && this.updateClientSize(), this.addEventListeners(), this.reset(), this.updateInitialPosition();\n        }\n    }\n    return \"undefined\" != typeof document && (window.VanillaTilt = t, t.init(document.querySelectorAll(\"[data-tilt]\"))), t;\n}();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./public/assets/js/tilt.min.js\n"));

/***/ })

}]);